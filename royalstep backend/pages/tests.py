from django.test import TestCase
from django.contrib.auth import get_user_model
from django.utils import timezone
from rest_framework.test import APIClient

from .models import Page
from .utils import generate_unique_slug

User = get_user_model()


class PageModelTests(TestCase):
	def setUp(self):
		self.user = User.objects.create_user(username="editor", password="pass123", is_staff=True)

	def test_slug_autogenerated_and_unique(self):
		p1 = Page.objects.create(title="About Us", content="<h1>About</h1>", author=self.user)
		p2 = Page.objects.create(title="About Us", content="<h1>About2</h1>", author=self.user)
		self.assertNotEqual(p1.slug, p2.slug)
		self.assertTrue(p2.slug.startswith(p1.slug.split('-')[0]))

	def test_published_queryset(self):
		draft = Page.objects.create(title="Draft", status=Page.STATUS_DRAFT)
		published = Page.objects.create(title="Live", status=Page.STATUS_PUBLISHED, published_at=timezone.now())
		self.assertIn(published, Page.objects.published())
		self.assertNotIn(draft, Page.objects.published())

	def test_sanitization_strips_script(self):
		raw = "<p>Hello</p><script>alert('x')</script>"
		p = Page.objects.create(title="Test", content=raw)
		self.assertNotIn("script", p.content)
		self.assertIn("Hello", p.content)


class SlugHelperTests(TestCase):
	def test_generate_unique_slug_collision(self):
		base_title = "Sample Title"
		p1 = Page.objects.create(title=base_title)
		slug1 = p1.slug
		slug2 = generate_unique_slug(Page, base_title)
		self.assertNotEqual(slug1, slug2)

	def test_generate_unique_slug_truncation(self):
		long_title = "a" * 300
		slug = generate_unique_slug(Page, long_title)
		self.assertLessEqual(len(slug), 255)


class PageAPITests(TestCase):
	def setUp(self):
		self.client = APIClient()
		self.staff = User.objects.create_user(username="staff", password="pass123", is_staff=True)
		self.pub = Page.objects.create(title="Public", status=Page.STATUS_PUBLISHED, published_at=timezone.now())
		self.draft = Page.objects.create(title="Draft Page", status=Page.STATUS_DRAFT)

	def test_public_list_only_published(self):
		resp = self.client.get("/api/pages/")
		self.assertEqual(resp.status_code, 200)
		slugs = [r["slug"] for r in resp.data['results']] if isinstance(resp.data, dict) else [r['slug'] for r in resp.data]
		self.assertIn(self.pub.slug, slugs)
		self.assertNotIn(self.draft.slug, slugs)

	def test_staff_sees_drafts(self):
		self.client.login(username="staff", password="pass123")
		resp = self.client.get("/api/pages/")
		slugs = [r["slug"] for r in resp.data['results']] if isinstance(resp.data, dict) else [r['slug'] for r in resp.data]
		self.assertIn(self.draft.slug, slugs)

	def test_detail_published(self):
		resp = self.client.get(f"/api/pages/{self.pub.slug}/")
		self.assertEqual(resp.status_code, 200)
		self.assertEqual(resp.data["slug"], self.pub.slug)

	def test_detail_draft_hidden(self):
		resp = self.client.get(f"/api/pages/{self.draft.slug}/")
		self.assertEqual(resp.status_code, 404)
		# staff sees it
		self.client.login(username="staff", password="pass123")
		resp2 = self.client.get(f"/api/pages/{self.draft.slug}/")
		self.assertEqual(resp2.status_code, 200)
